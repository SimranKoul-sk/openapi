openapi: 3.0.3
info:
  description: |
    This API provides the API consumer with the ability to subscribe to Reachability status events.

    # Introduction

    ## Reachability Status
    API consumer is able to be notified whether the reachability status of a certain user device has changed to either data- or sms-usage.
    This capability is provided via a subscription  request - in this case the reachability situation is part of the event notification, which is sent back to the event subscriber when reachability situation has changed.

    # Relevant terms and definitions

    * **Device**: A device refers to any physical entity that can connect to a network and participate in network communication.
      At least one identifier for the device (user equipment) out of four options: IPv4 address, IPv6 address, Phone number, or Network Access Identifier (not supported for this API version) assigned by the mobile network operator for the device.

    # API Functionality

    The API exposes following capability:

    ## Device reachability status subscription

    These endpoints allow to manage event subscription on reachability device status event.
    The CAMARA subscription model is detailed in the CAMARA API design guideline document and follows CloudEvents specification.

    When subscribing, it is mandatory to provide the event `types` you are subscribing to, as multiple subscription-types are managed by this API.

    Following event ``types`` are managed for this API:
      - ``org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data``: Event triggered when the device is connected to the network for Data usage (regardless of the SMS reachability).

      - ``org.camaraproject.device-reachability-status-subscriptions.v0.reachability-sms``: Event triggered when the device is connected to the network only for SMS usage

      - ``org.camaraproject.device-reachability-status-subscriptions.v0.reachability-disconnected``: Event triggered when the device is not connected.

    Note: Additionally to these list, ``org.camaraproject.device-reachability-status-subscriptions.v0.subscription-ends`` notification `type` is sent when the subscription ends.
    This notification does not require dedicated subscription.

    It is used in following cases:
      - the subscription expire time (optionally set by the requester) has been reached
      - the maximum number of subscription events (optionally set by the requester) has been reached
      - the subscription was deleted by the requester
      - the Access Token `sinkCredential` (optionally set by the requester) expiration time has been reached
      - the API server has to stop sending notification prematurely

    **Note on combined usage of ``initialEvent`` and ``subscriptionMaxEvents``**:

    If an event is triggered following ``initialEvent`` set to true,
    this event will be counted towards ``subscriptionMaxEvents`` (if provided).


    **Clarification on ``initialEvent`` & ``event-type`` behaviour:**

    Following table illustrate behaviour regarding event triggering depending on **initial** reachability state of the device:

    | subscribed event-type | device reachability status at subscription time | event sent if ``initialEvent`` set to true | Explanation |
    | ----------------------| ------------- | --------------- | ---------------|
    | reachability-data  | Device can use data |   Yes | The device is reachable for data, so the event is triggered. |
    | reachability-data  | Device is disconnected or SMS-only | No | The device cannot use data, so no event is sent. |
    | reachability-sms  | Device can use data | No | The device can use data, but for thids event is only for SMS. |
    | reachability-sms  |  Device is SMS-only | Yes | The device supports SMS, so the event is triggered. |
    | reachability-sms  | Device is disconnected | No | The device cannot send SMS, so no event is send. |
    | reachability-disconnected  | Device can use data or SMS usage | No | The device is reachable, so no "disconnected" event is sent. |
    | reachability-disconnected  | Device is disconnected | Yes | The device is disconnected, so the event is triggered. |

    ### Notifications callback

    This endpoint describes the event notification received on subscription listener side when the event occurred.
    As for subscription, detailed description of the event notification is provided in the CAMARA API design guideline document.

    _**WARNING**: This callback endpoint must be exposed on the consumer side as `POST /{$request.body#/sink}`.
      Developers may provide a callback URL on which notifications regarding reachability-status can be received from the service provider.
      If an event occurs the application will send events to the provided webhook - `sink`._

    # Further info and support

    ## Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.

    ## Identifying the device from the access token

    This API requires the API consumer to identify a device as the subject of the API as follows:
    - When the API is invoked using a two-legged access token, the subject will be identified from the optional `device` object, which therefore MUST be provided.

    - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged access token to invoke the API by relying on the information that is associated with the access token and was identified during the authentication process.

    ### Error handling:
    - If the subject cannot be identified from the access token and the optional `device` object is not included in the request, then the server will return an error with the `422 MISSING_IDENTIFIER` error code.

    - If the subject can be identified from the access token and the optional `device` object is also included in the request, then the server will return an error with the `422 UNNECESSARY_IDENTIFIER` error code. This will be the case even if the same device is identified by these two methods, as the server is unable to make this comparison.

    ## Multi-SIM scenario handling

    In multi-SIM scenarios where more than one mobile device is associated with a phone number (e.g. a smartphone with an associated smartwatch), it might not be possible to uniquely identify from that phone number the device for which reachability status notifications should be provided. If the phone number is used as the device identifier when creating a subscription for a multi-SIM scenario, the API may:
    - respond with an error, or
    - provide reachability status update notifications for the multi-SIM group as a whole, or
    - provide reachability status update notifications only for a single device in the multi-SIM group, which may not be the intended device.

    Possible solutions in such a scenario include:
    - Using the authorisation code flow to obtain an access token, which will automatically identify the intended device
    - Identifying the intended device from a unique identifier for that device, such as its source IP address and port
    - Check with the SIM provider whether a unique "secondary" phone number is already associated with each device, and use the secondary phone number to identify the intended device if available.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Device Reachability Status Subscriptions
  version: 0.7.0
  x-camara-commonalities: 0.5
externalDocs:
  description: Product documentation at CAMARA
  url: https://github.com/camaraproject/DeviceStatus
servers:
- url: "{apiRoot}/device-reachability-status-subscriptions/v0.7"
  variables:
    apiRoot:
      default: http://localhost:9091
      description: "API root, defined by the service provider, e.g. api.example.com\
        \ or api.example.com/somepath"
tags:
- description: Operation to manage event subscription on device reachability status
    event.
  name: Device reachability status subscription
paths:
  /subscriptions:
    get:
      description: Retrieve a list of device reachability status event subscription(s)
      operationId: retrieve_device_reachability_status_subscription_list
      parameters:
      - description: Correlation id for the different services
        explode: false
        in: header
        name: x-correlator
        required: false
        schema:
          example: b4333c46-49c0-4f62-80d7-f0ef930f1c46
          pattern: "^[a-zA-Z0-9-]{0,55}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Subscription"
                minItems: 0
                type: array
          description: List of event subscription details
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "400":
          content:
            application/json:
              examples:
                GENERIC_400_INVALID_ARGUMENT:
                  description: Invalid Argument. Generic Syntax Exception
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Client specified an invalid argument, request body or\
                      \ query param."
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_400_response"
          description: Problem with the client request
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "401":
          content:
            application/json:
              examples:
                GENERIC_401_UNAUTHENTICATED:
                  description: Request cannot be authenticated
                  value:
                    status: 401
                    code: UNAUTHENTICATED
                    message: "Request not authenticated due to missing, invalid, or\
                      \ expired credentials."
                GENERIC_401_AUTHENTICATION_REQUIRED:
                  description: "New authentication is needed, authentication is no\
                    \ longer valid"
                  value:
                    status: 401
                    code: AUTHENTICATION_REQUIRED
                    message: New authentication is required.
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_401_response"
          description: Authentication problem with the client request
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "403":
          content:
            application/json:
              examples:
                GENERIC_403_PERMISSION_DENIED:
                  description: Permission denied. OAuth2 token access does not have
                    the required scope or when the user fails operational security
                  value:
                    status: 403
                    code: PERMISSION_DENIED
                    message: Client does not have sufficient permissions to perform
                      this action.
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_403_response"
          description: Client does not have sufficient permission
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
      security:
      - openId:
        - device-reachability-status-subscriptions:read
      summary: Retrieve a list of device reachability status event subscription
      tags:
      - Device reachability status subscription
      x-openapi-router-controller: openapi_server.controllers.device_reachability_status_subscription_controller
    post:
      callbacks:
        notifications:
          '{$request.body#/sink}':
            post:
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                The Device status server will call this endpoint whenever any device reachability status related event occurs.
              operationId: postNotification
              parameters:
              - description: Correlation id for the different services
                explode: false
                in: header
                name: x-correlator
                required: false
                schema:
                  example: b4333c46-49c0-4f62-80d7-f0ef930f1c46
                  pattern: "^[a-zA-Z0-9-]{0,55}$"
                  type: string
                style: simple
              requestBody:
                content:
                  application/cloudevents+json:
                    examples:
                      reachability-data:
                        $ref: "#/components/examples/REACHABILITY_DATA"
                      reachability-sms:
                        $ref: "#/components/examples/REACHABILITY_SMS"
                      reachability-disconnected:
                        $ref: "#/components/examples/REACHABILITY_DISCONNECTED"
                      subscription-ends:
                        $ref: "#/components/examples/SUBSCRIPTION_ENDS"
                    schema:
                      $ref: "#/components/schemas/CloudEvent"
                required: true
              responses:
                "204":
                  description: Successful notification
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
                "400":
                  content:
                    application/json:
                      examples:
                        GENERIC_400_INVALID_ARGUMENT:
                          description: Invalid Argument. Generic Syntax Exception
                          value:
                            status: 400
                            code: INVALID_ARGUMENT
                            message: "Client specified an invalid argument, request\
                              \ body or query param."
                      schema:
                        $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_400_response"
                  description: Problem with the client request
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
                "401":
                  content:
                    application/json:
                      examples:
                        GENERIC_401_UNAUTHENTICATED:
                          description: Request cannot be authenticated
                          value:
                            status: 401
                            code: UNAUTHENTICATED
                            message: "Request not authenticated due to missing, invalid,\
                              \ or expired credentials."
                        GENERIC_401_AUTHENTICATION_REQUIRED:
                          description: "New authentication is needed, authentication\
                            \ is no longer valid"
                          value:
                            status: 401
                            code: AUTHENTICATION_REQUIRED
                            message: New authentication is required.
                      schema:
                        $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_401_response"
                  description: Authentication problem with the client request
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
                "403":
                  content:
                    application/json:
                      examples:
                        GENERIC_403_PERMISSION_DENIED:
                          description: Permission denied. OAuth2 token access does
                            not have the required scope or when the user fails operational
                            security
                          value:
                            status: 403
                            code: PERMISSION_DENIED
                            message: Client does not have sufficient permissions to
                              perform this action.
                      schema:
                        $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_403_response"
                  description: Client does not have sufficient permission
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
                "410":
                  content:
                    application/json:
                      examples:
                        GENERIC_410_GONE:
                          description: Use in notifications flow to allow API Consumer
                            to indicate that its callback is no longer available
                          value:
                            status: 410
                            code: GONE
                            message: Access to the target resource is no longer available.
                      schema:
                        $ref: "#/components/schemas/postNotification_410_response"
                  description: Gone
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
                "429":
                  content:
                    application/json:
                      examples:
                        GENERIC_429_QUOTA_EXCEEDED:
                          description: Request is rejected due to exceeding a business
                            quota limit
                          value:
                            status: 429
                            code: QUOTA_EXCEEDED
                            message: Out of resource quota.
                        GENERIC_429_TOO_MANY_REQUESTS:
                          description: Access to the API has been temporarily blocked
                            due to rate or spike arrest limits being reached
                          value:
                            status: 429
                            code: TOO_MANY_REQUESTS
                            message: Rate limit reached.
                      schema:
                        $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_429_response"
                  description: Too Many Requests
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
              security:
              - {}
              - notificationsBearerAuth: []
              summary: notifications callback
              x-callback-request: true
      description: Create a device reachability status event subscription for a device
      operationId: create_device_reachability_status_subscription
      parameters:
      - description: Correlation id for the different services
        explode: false
        in: header
        name: x-correlator
        required: false
        schema:
          example: b4333c46-49c0-4f62-80d7-f0ef930f1c46
          pattern: "^[a-zA-Z0-9-]{0,55}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Create Subscription:
                $ref: "#/components/examples/CREATE_SUBSCRIPTION"
            schema:
              $ref: "#/components/schemas/SubscriptionRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                subscription-active:
                  $ref: "#/components/examples/SUBSCRIPTION_ACTIVE"
              schema:
                $ref: "#/components/schemas/Subscription"
          description: Created
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionAsync"
          description: Request accepted to be processed. It applies for async creation
            process.
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "400":
          content:
            application/json:
              examples:
                GENERIC_400_INVALID_ARGUMENT:
                  description: Invalid Argument. Generic Syntax Exception
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Client specified an invalid argument, request body or\
                      \ query param."
                GENERIC_400_OUT_OF_RANGE:
                  description: Out of Range. Specific Syntax Exception used when a
                    given field has a pre-defined range or a invalid filter criteria
                    combination is requested
                  value:
                    status: 400
                    code: OUT_OF_RANGE
                    message: Client specified an invalid range.
                GENERIC_400_INVALID_PROTOCOL:
                  description: Invalid protocol for events subscription management
                  value:
                    status: 400
                    code: INVALID_PROTOCOL
                    message: Only HTTP is supported
                GENERIC_400_INVALID_CREDENTIAL:
                  description: Invalid sink credential type
                  value:
                    status: 400
                    code: INVALID_CREDENTIAL
                    message: Only Access token is supported
                GENERIC_400_INVALID_TOKEN:
                  description: Invalid token type for sink credential of type ACCESSTOKEN
                  value:
                    status: 400
                    code: INVALID_TOKEN
                    message: Only bearer token is supported
              schema:
                $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_400_response"
          description: Problem with the client request
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "401":
          content:
            application/json:
              examples:
                GENERIC_401_UNAUTHENTICATED:
                  description: Request cannot be authenticated
                  value:
                    status: 401
                    code: UNAUTHENTICATED
                    message: "Request not authenticated due to missing, invalid, or\
                      \ expired credentials."
                GENERIC_401_AUTHENTICATION_REQUIRED:
                  description: "New authentication is needed, authentication is no\
                    \ longer valid"
                  value:
                    status: 401
                    code: AUTHENTICATION_REQUIRED
                    message: New authentication is required.
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_401_response"
          description: Authentication problem with the client request
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "403":
          content:
            application/json:
              examples:
                GENERIC_403_PERMISSION_DENIED:
                  description: Permission denied. OAuth2 token access does not have
                    the required scope or when the user fails operational security
                  value:
                    status: 403
                    code: PERMISSION_DENIED
                    message: Client does not have sufficient permissions to perform
                      this action.
                GENERIC_403_SUBSCRIPTION_MISMATCH:
                  description: Inconsistent access token for requested subscription
                  value:
                    status: 403
                    code: SUBSCRIPTION_MISMATCH
                    message: Inconsistent access token for requested events subscription
              schema:
                $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_403_response"
          description: Client does not have sufficient permission
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "409":
          content:
            application/json:
              examples:
                GENERIC_409_ABORTED:
                  description: Concurreny of processes of the same nature/scope
                  value:
                    status: 409
                    code: ABORTED
                    message: Concurrency conflict.
                GENERIC_409_ALREADY_EXISTS:
                  description: Trying to create an existing resource
                  value:
                    status: 409
                    code: ALREADY_EXISTS
                    message: The resource that a client tried to create already exists.
              schema:
                $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_409_response"
          description: Conflict
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "422":
          content:
            application/json:
              examples:
                GENERIC_422_IDENTIFIER_MISMATCH:
                  description: Inconsistency between identifiers not pointing to the
                    same device
                  value:
                    status: 422
                    code: IDENTIFIER_MISMATCH
                    message: Provided identifiers are not consistent.
                GENERIC_422_SERVICE_NOT_APPLICABLE:
                  description: Service not applicable for the provided identifier
                  value:
                    status: 422
                    code: SERVICE_NOT_APPLICABLE
                    message: The service is not available for the provided identifier.
                GENERIC_422_MISSING_IDENTIFIER:
                  description: An identifier is not included in the request and the
                    device or phone number identification cannot be derived from the
                    3-legged access token
                  value:
                    status: 422
                    code: MISSING_IDENTIFIER
                    message: The device cannot be identified.
                GENERIC_422_UNSUPPORTED_IDENTIFIER:
                  description: None of the provided identifiers is supported by the
                    implementation
                  value:
                    status: 422
                    code: UNSUPPORTED_IDENTIFIER
                    message: The identifier provided is not supported.
                GENERIC_422_UNNECESSARY_IDENTIFIER:
                  description: An explicit identifier is provided when a device or
                    phone number has already been identified from the access token
                  value:
                    status: 422
                    code: UNNECESSARY_IDENTIFIER
                    message: The device is already identified by the access token.
                GENERIC_422_MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED:
                  description: Multi event types subscription is not supported
                  value:
                    status: 422
                    code: MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED
                    message: Multi event types subscription not managed
              schema:
                $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_422_response"
          description: Unprocessable Entity
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "429":
          content:
            application/json:
              examples:
                GENERIC_429_QUOTA_EXCEEDED:
                  description: Request is rejected due to exceeding a business quota
                    limit
                  value:
                    status: 429
                    code: QUOTA_EXCEEDED
                    message: Out of resource quota.
                GENERIC_429_TOO_MANY_REQUESTS:
                  description: Access to the API has been temporarily blocked due
                    to rate or spike arrest limits being reached
                  value:
                    status: 429
                    code: TOO_MANY_REQUESTS
                    message: Rate limit reached.
              schema:
                $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_429_response"
          description: Too Many Requests
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
      security:
      - openId:
        - device-reachability-status-subscriptions:org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data:create
        - device-reachability-status-subscriptions:org.camaraproject.device-reachability-status-subscriptions.v0.reachability-sms:create
        - device-reachability-status-subscriptions:org.camaraproject.device-reachability-status-subscriptions.v0.reachability-disconnected:create
      summary: Create a device reachability status event subscription for a device
      tags:
      - Device reachability status subscription
      x-openapi-router-controller: openapi_server.controllers.device_reachability_status_subscription_controller
  /subscriptions/{subscriptionId}:
    delete:
      description: Delete a given subscription by ID
      operationId: delete_device_reachability_status_subscription
      parameters:
      - description: Subscription identifier that was obtained from the create event
          subscription operation
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          $ref: "#/components/schemas/SubscriptionId"
        style: simple
      - description: Correlation id for the different services
        explode: false
        in: header
        name: x-correlator
        required: false
        schema:
          example: b4333c46-49c0-4f62-80d7-f0ef930f1c46
          pattern: "^[a-zA-Z0-9-]{0,55}$"
          type: string
        style: simple
      responses:
        "204":
          description: event subscription deleted
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionAsync"
          description: Request accepted to be processed. It applies for async deletion
            process.
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "400":
          content:
            application/json:
              examples:
                GENERIC_400_INVALID_ARGUMENT:
                  description: Invalid Argument. Generic Syntax Exception
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Client specified an invalid argument, request body or\
                      \ query param."
                GENERIC_400_SUBSCRIPTION_ID_REQUIRED:
                  description: subscription id is required
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: subscriptionId"
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_400_response"
          description: Problem with the client request
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "401":
          content:
            application/json:
              examples:
                GENERIC_401_UNAUTHENTICATED:
                  description: Request cannot be authenticated
                  value:
                    status: 401
                    code: UNAUTHENTICATED
                    message: "Request not authenticated due to missing, invalid, or\
                      \ expired credentials."
                GENERIC_401_AUTHENTICATION_REQUIRED:
                  description: "New authentication is needed, authentication is no\
                    \ longer valid"
                  value:
                    status: 401
                    code: AUTHENTICATION_REQUIRED
                    message: New authentication is required.
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_401_response"
          description: Authentication problem with the client request
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "403":
          content:
            application/json:
              examples:
                GENERIC_403_PERMISSION_DENIED:
                  description: Permission denied. OAuth2 token access does not have
                    the required scope or when the user fails operational security
                  value:
                    status: 403
                    code: PERMISSION_DENIED
                    message: Client does not have sufficient permissions to perform
                      this action.
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_403_response"
          description: Client does not have sufficient permission
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "404":
          content:
            application/json:
              examples:
                GENERIC_404_NOT_FOUND:
                  description: Resource is not found
                  value:
                    status: 404
                    code: NOT_FOUND
                    message: The specified resource is not found.
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscription_404_response"
          description: Resource Not Found
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
      security:
      - openId:
        - device-reachability-status-subscriptions:delete
      summary: Delete a device reachability status event subscription for a device
      tags:
      - Device reachability status subscription
      x-openapi-router-controller: openapi_server.controllers.device_reachability_status_subscription_controller
    get:
      description: Retrieve a given subscription by ID
      operationId: retrieve_device_reachability_status_subscription
      parameters:
      - description: Subscription identifier that was obtained from the create event
          subscription operation
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          $ref: "#/components/schemas/SubscriptionId"
        style: simple
      - description: Correlation id for the different services
        explode: false
        in: header
        name: x-correlator
        required: false
        schema:
          example: b4333c46-49c0-4f62-80d7-f0ef930f1c46
          pattern: "^[a-zA-Z0-9-]{0,55}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                subscription-active:
                  $ref: "#/components/examples/SUBSCRIPTION_ACTIVE"
                subscription-activation-requested:
                  $ref: "#/components/examples/SUBSCRIPTION_ACTIVATION_REQUESTED"
                subscription-deleted:
                  $ref: "#/components/examples/SUBSCRIPTION_DELETED"
              schema:
                $ref: "#/components/schemas/Subscription"
          description: OK
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "400":
          content:
            application/json:
              examples:
                GENERIC_400_INVALID_ARGUMENT:
                  description: Invalid Argument. Generic Syntax Exception
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Client specified an invalid argument, request body or\
                      \ query param."
                GENERIC_400_SUBSCRIPTION_ID_REQUIRED:
                  description: subscription id is required
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: subscriptionId"
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_400_response"
          description: Problem with the client request
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "401":
          content:
            application/json:
              examples:
                GENERIC_401_UNAUTHENTICATED:
                  description: Request cannot be authenticated
                  value:
                    status: 401
                    code: UNAUTHENTICATED
                    message: "Request not authenticated due to missing, invalid, or\
                      \ expired credentials."
                GENERIC_401_AUTHENTICATION_REQUIRED:
                  description: "New authentication is needed, authentication is no\
                    \ longer valid"
                  value:
                    status: 401
                    code: AUTHENTICATION_REQUIRED
                    message: New authentication is required.
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_401_response"
          description: Authentication problem with the client request
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "403":
          content:
            application/json:
              examples:
                GENERIC_403_PERMISSION_DENIED:
                  description: Permission denied. OAuth2 token access does not have
                    the required scope or when the user fails operational security
                  value:
                    status: 403
                    code: PERMISSION_DENIED
                    message: Client does not have sufficient permissions to perform
                      this action.
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_403_response"
          description: Client does not have sufficient permission
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "404":
          content:
            application/json:
              examples:
                GENERIC_404_NOT_FOUND:
                  description: Resource is not found
                  value:
                    status: 404
                    code: NOT_FOUND
                    message: The specified resource is not found.
              schema:
                $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscription_404_response"
          description: Resource Not Found
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
      security:
      - openId:
        - device-reachability-status-subscriptions:read
      summary: Retrieve a device reachability status event subscription for a device
      tags:
      - Device reachability status subscription
      x-openapi-router-controller: openapi_server.controllers.device_reachability_status_subscription_controller
components:
  examples:
    REACHABILITY_DATA:
      value:
        id: "123656"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          subscriptionId: qs15-h556-rt89-1298
        time: 2023-01-19T13:18:23.682Z
    REACHABILITY_SMS:
      value:
        id: "123656"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-reachability-status-subscriptions.v0.reachability-sms
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          subscriptionId: qs15-h556-rt89-1298
        time: 2023-01-19T13:18:23.682Z
    REACHABILITY_DISCONNECTED:
      value:
        id: "123656"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-reachability-status-subscriptions.v0.reachability-disconnected
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          subscriptionId: qs15-h556-rt89-1298
        time: 2023-01-19T13:18:23.682Z
    SUBSCRIPTION_ENDS:
      value:
        id: "123658"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-reachability-status-subscriptions.v0.subscription-ends
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          terminationReason: SUBSCRIPTION_EXPIRED
          subscriptionId: qs15-h556-rt89-1298
          terminationDescription: Subscription expiry time has been reached
        time: 2024-03-22T05:40:23.682Z
    SUBSCRIPTION_ACTIVE:
      value:
        id: 550e8400-e29b-41d4-a716-446655440000
        sink: https://endpoint.example.com/sink
        protocol: HTTP
        types:
        - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: 2024-07-17T13:18:23.682Z
          subscriptionMaxEvents: 5
          initialEvent: true
        startsAt: 2024-07-03T21:12:02.871Z
        expiresAt: 2024-07-03T21:12:02.871Z
        status: ACTIVE
    SUBSCRIPTION_ACTIVATION_REQUESTED:
      value:
        id: 550e8400-e29b-41d4-a716-446655440000
        sink: https://endpoint.example.com/sink
        protocol: HTTP
        types:
        - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: 2024-07-17T13:18:23.682Z
          subscriptionMaxEvents: 5
          initialEvent: true
        startsAt: 2024-07-03T21:12:02.871Z
        expiresAt: 2024-07-03T21:12:02.871Z
        status: ACTIVATION_REQUESTED
    SUBSCRIPTION_DELETED:
      value:
        id: 550e8400-e29b-41d4-a716-446655440000
        sink: https://endpoint.example.com/sink
        protocol: HTTP
        types:
        - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: 2024-07-17T13:18:23.682Z
          subscriptionMaxEvents: 5
          initialEvent: true
        startsAt: 2024-07-03T21:12:02.871Z
        expiresAt: 2024-07-03T21:12:02.871Z
        status: DELETED
    CREATE_SUBSCRIPTION:
      value:
        sink: https://endpoint.example.com/sink
        sinkCredential:
          credentialType: ACCESSTOKEN
          accessToken: JhbGciOiJSUzI1NiIsImtpZCI6Imk2bEdrM0ZaenhSY1ViMkMzbkVRN3N5SEpsW
          accessTokenExpiresUtc: 2024-02-17T16:23:45Z
          accessTokenType: bearer
        protocol: HTTP
        types:
        - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: 2023-01-17T13:18:23.682Z
          subscriptionMaxEvents: 5
          initialEvent: true
  headers:
    x-correlator:
      description: Correlation id for the different services
      explode: false
      schema:
        example: b4333c46-49c0-4f62-80d7-f0ef930f1c46
        pattern: "^[a-zA-Z0-9-]{0,55}$"
        type: string
      style: simple
  parameters:
    SubscriptionId:
      description: Subscription identifier that was obtained from the create event
        subscription operation
      explode: false
      in: path
      name: subscriptionId
      required: true
      schema:
        $ref: "#/components/schemas/SubscriptionId"
      style: simple
    x-correlator:
      description: Correlation id for the different services
      explode: false
      in: header
      name: x-correlator
      required: false
      schema:
        example: b4333c46-49c0-4f62-80d7-f0ef930f1c46
        pattern: "^[a-zA-Z0-9-]{0,55}$"
        type: string
      style: simple
  responses:
    CreateSubscriptionBadRequest400:
      content:
        application/json:
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Client specified an invalid argument, request body or query\
                  \ param."
            GENERIC_400_OUT_OF_RANGE:
              description: Out of Range. Specific Syntax Exception used when a given
                field has a pre-defined range or a invalid filter criteria combination
                is requested
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.
            GENERIC_400_INVALID_PROTOCOL:
              description: Invalid protocol for events subscription management
              value:
                status: 400
                code: INVALID_PROTOCOL
                message: Only HTTP is supported
            GENERIC_400_INVALID_CREDENTIAL:
              description: Invalid sink credential type
              value:
                status: 400
                code: INVALID_CREDENTIAL
                message: Only Access token is supported
            GENERIC_400_INVALID_TOKEN:
              description: Invalid token type for sink credential of type ACCESSTOKEN
              value:
                status: 400
                code: INVALID_TOKEN
                message: Only bearer token is supported
          schema:
            $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_400_response"
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic400:
      content:
        application/json:
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Client specified an invalid argument, request body or query\
                  \ param."
          schema:
            $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_400_response"
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    SubscriptionIdRequired400:
      content:
        application/json:
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Client specified an invalid argument, request body or query\
                  \ param."
            GENERIC_400_SUBSCRIPTION_ID_REQUIRED:
              description: subscription id is required
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Expected property is missing: subscriptionId"
          schema:
            $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_400_response"
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic401:
      content:
        application/json:
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated
              value:
                status: 401
                code: UNAUTHENTICATED
                message: "Request not authenticated due to missing, invalid, or expired\
                  \ credentials."
            GENERIC_401_AUTHENTICATION_REQUIRED:
              description: "New authentication is needed, authentication is no longer\
                \ valid"
              value:
                status: 401
                code: AUTHENTICATION_REQUIRED
                message: New authentication is required.
          schema:
            $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_401_response"
      description: Authentication problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic403:
      content:
        application/json:
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the
                required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this
                  action.
          schema:
            $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscriptionList_403_response"
      description: Client does not have sufficient permission
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    SubscriptionPermissionDenied403:
      content:
        application/json:
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the
                required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this
                  action.
            GENERIC_403_SUBSCRIPTION_MISMATCH:
              description: Inconsistent access token for requested subscription
              value:
                status: 403
                code: SUBSCRIPTION_MISMATCH
                message: Inconsistent access token for requested events subscription
          schema:
            $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_403_response"
      description: Client does not have sufficient permission
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic404:
      content:
        application/json:
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
          schema:
            $ref: "#/components/schemas/retrieveDeviceReachabilityStatusSubscription_404_response"
      description: Resource Not Found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic409:
      content:
        application/json:
          examples:
            GENERIC_409_ABORTED:
              description: Concurreny of processes of the same nature/scope
              value:
                status: 409
                code: ABORTED
                message: Concurrency conflict.
            GENERIC_409_ALREADY_EXISTS:
              description: Trying to create an existing resource
              value:
                status: 409
                code: ALREADY_EXISTS
                message: The resource that a client tried to create already exists.
          schema:
            $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_409_response"
      description: Conflict
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic410:
      content:
        application/json:
          examples:
            GENERIC_410_GONE:
              description: Use in notifications flow to allow API Consumer to indicate
                that its callback is no longer available
              value:
                status: 410
                code: GONE
                message: Access to the target resource is no longer available.
          schema:
            $ref: "#/components/schemas/postNotification_410_response"
      description: Gone
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    CreateSubscriptionUnprocessableEntity422:
      content:
        application/json:
          examples:
            GENERIC_422_IDENTIFIER_MISMATCH:
              description: Inconsistency between identifiers not pointing to the same
                device
              value:
                status: 422
                code: IDENTIFIER_MISMATCH
                message: Provided identifiers are not consistent.
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the provided identifier.
            GENERIC_422_MISSING_IDENTIFIER:
              description: An identifier is not included in the request and the device
                or phone number identification cannot be derived from the 3-legged
                access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The device cannot be identified.
            GENERIC_422_UNSUPPORTED_IDENTIFIER:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: The identifier provided is not supported.
            GENERIC_422_UNNECESSARY_IDENTIFIER:
              description: An explicit identifier is provided when a device or phone
                number has already been identified from the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: The device is already identified by the access token.
            GENERIC_422_MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED:
              description: Multi event types subscription is not supported
              value:
                status: 422
                code: MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED
                message: Multi event types subscription not managed
          schema:
            $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_422_response"
      description: Unprocessable Entity
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic429:
      content:
        application/json:
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Out of resource quota.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: Access to the API has been temporarily blocked due to rate
                or spike arrest limits being reached
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Rate limit reached.
          schema:
            $ref: "#/components/schemas/createDeviceReachabilityStatusSubscription_429_response"
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
  schemas:
    ErrorInfo:
      properties:
        status:
          description: HTTP response status code
          title: status
          type: integer
        code:
          description: Code given to this error
          title: code
          type: string
        message:
          description: Detailed error description
          title: message
          type: string
      required:
      - code
      - message
      - status
      title: ErrorInfo
      type: object
    SubscriptionRequest:
      description: The request for creating a event-type event subscription
      discriminator:
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionRequest"
          MQTT3: "#/components/schemas/MQTTSubscriptionRequest"
          MQTT5: "#/components/schemas/MQTTSubscriptionRequest"
          AMQP: "#/components/schemas/AMQPSubscriptionRequest"
          NATS: "#/components/schemas/NATSSubscriptionRequest"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionRequest"
        propertyName: protocol
      example:
        protocol: HTTP
        types:
        - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
        sink: https://endpoint.example.com/sink
        sinkCredential:
          credentialType: PLAIN
        config:
          initialEvent: true
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
              ipv6Address: 2001:db8:85a3:8d3:1319:8a2e:370:7344
              ipv4Address:
                publicAddress: 84.125.93.10
                publicPort: 59765
              networkAccessIdentifier: 123456789@domain.com
          subscriptionExpireTime: 2023-01-17T13:18:23.682Z
          subscriptionMaxEvents: 5
      properties:
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          description: The address to which events shall be delivered using the selected
            protocol.
          example: https://endpoint.example.com/sink
          format: uri
          title: sink
          type: string
        sinkCredential:
          $ref: "#/components/schemas/SinkCredential"
        types:
          description: |
            Camara Event types eligible to be delivered by this subscription.
            Note: For the current Commonalities API design guidelines, only one event type per subscription is allowed, yet in the following releases use of array of event types SHALL be specified without changing this definition.
          items:
            $ref: "#/components/schemas/SubscriptionEventType"
          maxItems: 1
          minItems: 1
          title: types
          type: array
        config:
          $ref: "#/components/schemas/Config"
      required:
      - config
      - protocol
      - sink
      - types
      title: SubscriptionRequest
      type: object
    Protocol:
      description: Identifier of a delivery protocol. Only HTTP is allowed for now
      enum:
      - HTTP
      - MQTT3
      - MQTT5
      - AMQP
      - NATS
      - KAFKA
      example: HTTP
      title: Protocol
      type: string
    Config:
      description: |
        Implementation-specific configuration parameters needed by the subscription manager for acquiring events.
        In CAMARA we have predefined attributes like `subscriptionExpireTime`, `subscriptionMaxEvents`, `initialEvent`
        Specific event type attributes must be defined in `subscriptionDetail`
        Note: if a request is performed for several event type, all subscribed event will use same `config` parameters.
      example:
        initialEvent: true
        subscriptionDetail:
          device:
            phoneNumber: "+123456789"
            ipv6Address: 2001:db8:85a3:8d3:1319:8a2e:370:7344
            ipv4Address:
              publicAddress: 84.125.93.10
              publicPort: 59765
            networkAccessIdentifier: 123456789@domain.com
        subscriptionExpireTime: 2023-01-17T13:18:23.682Z
        subscriptionMaxEvents: 5
      properties:
        subscriptionDetail:
          $ref: "#/components/schemas/CreateSubscriptionDetail"
        subscriptionExpireTime:
          description: The subscription expiration time (in date-time format) requested
            by the API consumer. Up to API project decision to keep it.
          example: 2023-01-17T13:18:23.682Z
          format: date-time
          title: subscriptionExpireTime
          type: string
        subscriptionMaxEvents:
          description: "Identifies the maximum number of event reports to be generated\
            \ (>=1) requested by the API consumer - Once this number is reached, the\
            \ subscription ends. Up to API project decision to keep it."
          example: 5
          minimum: 1
          title: subscriptionMaxEvents
          type: integer
        initialEvent:
          description: |
            Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.Up to API project decision to keep it.
            Example: Consumer subscribes to reachability SMS. If consumer sets initialEvent to true and device is already reachable by SMS, an event is triggered.
          title: initialEvent
          type: boolean
      required:
      - subscriptionDetail
      title: Config
      type: object
    SinkCredential:
      description: A sink credential provides authentication or authorization information
        necessary to enable delivery of events to a target.
      discriminator:
        mapping:
          PLAIN: "#/components/schemas/PlainCredential"
          ACCESSTOKEN: "#/components/schemas/AccessTokenCredential"
          REFRESHTOKEN: "#/components/schemas/RefreshTokenCredential"
        propertyName: credentialType
      example:
        credentialType: PLAIN
      properties:
        credentialType:
          description: |
            The type of the credential.
            Note: Type of the credential - MUST be set to ACCESSTOKEN for now
          enum:
          - PLAIN
          - ACCESSTOKEN
          - REFRESHTOKEN
          title: credentialType
          type: string
      required:
      - credentialType
      title: SinkCredential
      type: object
    PlainCredential:
      allOf:
      - $ref: "#/components/schemas/SinkCredential"
      - properties:
          identifier:
            description: The identifier might be an account or username.
            type: string
          secret:
            description: The secret might be a password or passphrase.
            type: string
        required:
        - identifier
        - secret
        type: object
      description: A plain credential as a combination of an identifier and a secret.
      type: object
    AccessTokenCredential:
      allOf:
      - $ref: "#/components/schemas/SinkCredential"
      - properties:
          accessToken:
            description: REQUIRED. An access token is a previously acquired token
              granting access to the target resource.
            type: string
          accessTokenExpiresUtc:
            description: |
              REQUIRED. An absolute (UTC) timestamp at which the token shall be considered expired.
              In the case of an ACCESS_TOKEN_EXPIRED termination reason, implementation should notify the client before the expiration date.
              If the access token is a JWT and registered "exp" (Expiration Time) claim is present, the two expiry times should match.
              It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
              Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
            example: 2023-07-03T12:27:08.312Z
            format: date-time
            type: string
          accessTokenType:
            description: "REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1))."
            enum:
            - bearer
            type: string
        required:
        - accessToken
        - accessTokenExpiresUtc
        - accessTokenType
        type: object
      description: An access token credential.
      type: object
    RefreshTokenCredential:
      allOf:
      - $ref: "#/components/schemas/SinkCredential"
      - properties:
          accessToken:
            description: REQUIRED. An access token is a previously acquired token
              granting access to the target resource.
            type: string
          accessTokenExpiresUtc:
            description: |
              REQUIRED. An absolute (UTC) timestamp at which the token shall be considered expired.
              In the case of an ACCESS_TOKEN_EXPIRED termination reason, implementation should notify the client before the expiration date.
              If the access token is a JWT and registered "exp" (Expiration Time) claim is present, the two expiry times should match.
              It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
              Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
            example: 2023-07-03T12:27:08.312Z
            format: date-time
            type: string
          accessTokenType:
            description: "REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1))."
            enum:
            - bearer
            type: string
          refreshToken:
            description: REQUIRED. An refresh token credential used to acquire access
              tokens.
            type: string
          refreshTokenEndpoint:
            description: REQUIRED. A URL at which the refresh token can be traded
              for an access token.
            format: uri
            type: string
        type: object
      description: An access token credential with a refresh token.
      required:
      - accessToken
      - accessTokenExpiresUtc
      - accessTokenType
      - refreshToken
      - refreshTokenEndpoint
      type: object
    CreateSubscriptionDetail:
      description: The detail of the requested event subscription.
      example:
        device:
          phoneNumber: "+123456789"
          ipv6Address: 2001:db8:85a3:8d3:1319:8a2e:370:7344
          ipv4Address:
            publicAddress: 84.125.93.10
            publicPort: 59765
          networkAccessIdentifier: 123456789@domain.com
      properties:
        device:
          $ref: "#/components/schemas/Device"
      title: CreateSubscriptionDetail
      type: object
    EventTypeNotification:
      description: |
        reachability-data - Event triggered when the device is connected to the network for Data usage (regardless of the SMS reachability).

        reachability-sms - Event triggered when the device is connected to the network only for SMS usage

        reachability-disconnected - Event triggered when the device is not connected.

        subscription-ends - Event triggered when the subscription is terminated
      enum:
      - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
      - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-sms
      - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-disconnected
      - org.camaraproject.device-reachability-status-subscriptions.v0.subscription-ends
      title: EventTypeNotification
      type: string
    SubscriptionEventType:
      description: |
        reachability-data - Event triggered when the device is connected to the network for Data usage (regardless of the SMS reachability).

        reachability-sms - Event triggered when the device is connected to the network only for SMS usage

        reachability-disconnected - Event triggered when the device is not connected.
      enum:
      - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
      - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-sms
      - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-disconnected
      title: SubscriptionEventType
      type: string
    Subscription:
      description: Represents a event-type subscription.
      discriminator:
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionResponse"
          MQTT3: "#/components/schemas/MQTTSubscriptionResponse"
          MQTT5: "#/components/schemas/MQTTSubscriptionResponse"
          AMQP: "#/components/schemas/AMQPSubscriptionResponse"
          NATS: "#/components/schemas/NATSSubscriptionResponse"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionResponse"
        propertyName: protocol
      example:
        id: 550e8400-e29b-41d4-a716-446655440000
        sink: https://endpoint.example.com/sink
        protocol: HTTP
        types:
        - org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: 2024-07-17T13:18:23.682Z
          subscriptionMaxEvents: 5
          initialEvent: true
        startsAt: 2024-07-03T21:12:02.871Z
        expiresAt: 2024-07-03T21:12:02.871Z
        status: ACTIVE
      properties:
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          description: The address to which events shall be delivered using the selected
            protocol.
          example: https://endpoint.example.com/sink
          format: url
          type: string
        types:
          description: |
            Camara Event types eligible to be delivered by this subscription.
            Note: For the current Commonalities API design guidelines, only one event type per subscription is allowed
          items:
            $ref: "#/components/schemas/SubscriptionEventType"
          maxItems: 1
          minItems: 1
          type: array
        config:
          $ref: "#/components/schemas/Config"
        id:
          description: "The unique identifier of the subscription in the scope of\
            \ the subscription manager. When this information is contained within\
            \ an event notification, this concept SHALL be referred as `subscriptionId`\
            \ as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/r2.3/documentation/API-design-guidelines.md#122-event-notification)."
          example: qs15-h556-rt89-1298
          title: SubscriptionId
          type: string
        startsAt:
          description: |
            Date when the event subscription will begin/began
            It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
            Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
          example: 2023-07-03T12:27:08.312Z
          format: date-time
          type: string
        expiresAt:
          description: |
            Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has specific policy about that.
            It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
            Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
          example: 2023-07-03T12:27:08.312Z
          format: date-time
          type: string
        status:
          description: |-
            Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:
              - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.
              - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.
              - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.
              - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.
              - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept).
          enum:
          - ACTIVATION_REQUESTED
          - ACTIVE
          - EXPIRED
          - INACTIVE
          - DELETED
          type: string
      required:
      - config
      - id
      - protocol
      - sink
      - types
      title: Subscription
      type: object
    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators.

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`

        NOTE: the MNO might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different MNOs. In this case the identifiers MUST belong to the same device.
      example:
        phoneNumber: "+123456789"
        ipv6Address: 2001:db8:85a3:8d3:1319:8a2e:370:7344
        ipv4Address:
          publicAddress: 84.125.93.10
          publicPort: 59765
        networkAccessIdentifier: 123456789@domain.com
      minProperties: 1
      properties:
        phoneNumber:
          description: "A public identifier addressing a telephone subscription. In\
            \ mobile networks it corresponds to the MSISDN (Mobile Station International\
            \ Subscriber Directory Number). In order to be globally unique it has\
            \ to be formatted in international format, according to E.164 standard,\
            \ prefixed with '+'."
          example: "+123456789"
          pattern: "^\\+[1-9][0-9]{4,14}$"
          title: PhoneNumber
          type: string
        networkAccessIdentifier:
          description: "A public identifier addressing a subscription in a mobile\
            \ network. In 3GPP terminology, it corresponds to the GPSI formatted with\
            \ the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike\
            \ the telephone number, the network access identifier is not subjected\
            \ to portability ruling in force, and is individually managed by each\
            \ operator."
          example: 123456789@domain.com
          title: NetworkAccessIdentifier
          type: string
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          description: |
            The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
          example: 2001:db8:85a3:8d3:1319:8a2e:370:7344
          format: ipv6
          title: DeviceIpv6Address
          type: string
      title: Device
      type: object
    PhoneNumber:
      description: "A public identifier addressing a telephone subscription. In mobile\
        \ networks it corresponds to the MSISDN (Mobile Station International Subscriber\
        \ Directory Number). In order to be globally unique it has to be formatted\
        \ in international format, according to E.164 standard, prefixed with '+'."
      example: "+123456789"
      pattern: "^\\+[1-9][0-9]{4,14}$"
      title: PhoneNumber
      type: string
    NetworkAccessIdentifier:
      description: "A public identifier addressing a subscription in a mobile network.\
        \ In 3GPP terminology, it corresponds to the GPSI formatted with the External\
        \ Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone\
        \ number, the network access identifier is not subjected to portability ruling\
        \ in force, and is individually managed by each operator."
      example: 123456789@domain.com
      title: NetworkAccessIdentifier
      type: string
    DeviceIpv4Addr:
      anyOf: []
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      example:
        publicAddress: 84.125.93.10
        publicPort: 59765
      nullable: true
      properties:
        publicAddress:
          description: A single IPv4 address with no subnet mask
          example: 84.125.93.10
          format: ipv4
          type: string
        privateAddress:
          description: A single IPv4 address with no subnet mask
          example: 84.125.93.10
          format: ipv4
          type: string
        publicPort:
          description: TCP or UDP port number
          maximum: 65535
          minimum: 0
          type: integer
      title: DeviceIpv4Addr
      type: object
    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      example: 84.125.93.10
      format: ipv4
      type: string
    Port:
      description: TCP or UDP port number
      maximum: 65535
      minimum: 0
      type: integer
    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344
      format: ipv6
      title: DeviceIpv6Address
      type: string
    SubscriptionAsync:
      description: Response for a device reachability status operation managed asynchronously
        (Creation or Deletion)
      example:
        id: qs15-h556-rt89-1298
      properties:
        id:
          description: "The unique identifier of the subscription in the scope of\
            \ the subscription manager. When this information is contained within\
            \ an event notification, this concept SHALL be referred as `subscriptionId`\
            \ as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/r2.3/documentation/API-design-guidelines.md#122-event-notification)."
          example: qs15-h556-rt89-1298
          title: SubscriptionId
          type: string
      title: SubscriptionAsync
      type: object
    SubscriptionId:
      description: "The unique identifier of the subscription in the scope of the\
        \ subscription manager. When this information is contained within an event\
        \ notification, this concept SHALL be referred as `subscriptionId` as per\
        \ [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/r2.3/documentation/API-design-guidelines.md#122-event-notification)."
      example: qs15-h556-rt89-1298
      title: SubscriptionId
      type: string
    CloudEvent:
      description: The notification callback
      discriminator:
        mapping:
          org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data: "#/components/schemas/EventReachabilityData"
          org.camaraproject.device-reachability-status-subscriptions.v0.reachability-sms: "#/components/schemas/EventReachabilitySms"
          org.camaraproject.device-reachability-status-subscriptions.v0.reachability-disconnected: "#/components/schemas/EventReachabilityDisconnected"
          org.camaraproject.device-reachability-status-subscriptions.v0.subscription-ends: "#/components/schemas/EventSubscriptionEnds"
        propertyName: type
      properties:
        id:
          description: "identifier of this event, that must be unique in the source\
            \ context."
          title: id
          type: string
        source:
          description: |
            Identifies the context in which an event happened - be a non-empty `URI-reference` like:
            - URI with a DNS authority:
              * https://github.com/cloudevents
              * mailto:cncf-wg-serverless@lists.cncf.io
            - Universally-unique URN with a UUID:
              * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
            - Application-specific identifier:
              * /cloudevents/spec/pull/123
              * 1-555-123-4567
          example: https://notificationSendServer12.supertelco.com
          format: uri-reference
          minLength: 1
          title: source
          type: string
        type:
          $ref: "#/components/schemas/EventTypeNotification"
        specversion:
          description: Version of the specification to which this event conforms (must
            be 1.0 if it conforms to cloudevents 1.0.2 version)
          enum:
          - "1.0"
          title: specversion
          type: string
        datacontenttype:
          description: "media-type that describes the event payload encoding, must\
            \ be \"application/json\" for CAMARA APIs"
          enum:
          - application/json
          title: datacontenttype
          type: string
        data:
          description: Event details payload described in each CAMARA API and referenced
            by its type
          title: data
          type: object
        time:
          description: |
            Timestamp of when the occurrence happened.
            If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer,
            however all producers for the same source MUST be consistent in this respect. In other words,
            either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
            It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
            Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
          example: 2018-04-05T17:31:00Z
          format: date-time
          title: time
          type: string
      required:
      - id
      - source
      - specversion
      - time
      - type
      title: CloudEvent
    Source:
      description: |
        Identifies the context in which an event happened - be a non-empty `URI-reference` like:
        - URI with a DNS authority:
          * https://github.com/cloudevents
          * mailto:cncf-wg-serverless@lists.cncf.io
        - Universally-unique URN with a UUID:
          * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
        - Application-specific identifier:
          * /cloudevents/spec/pull/123
          * 1-555-123-4567
      example: https://notificationSendServer12.supertelco.com
      format: uri-reference
      minLength: 1
      title: source
      type: string
    DateTime:
      description: |
        Timestamp of when the occurrence happened.
        If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer,
        however all producers for the same source MUST be consistent in this respect. In other words,
        either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
        It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
        Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
      example: 2018-04-05T17:31:00Z
      format: date-time
      title: time
      type: string
    EventReachabilityData:
      allOf:
      - $ref: "#/components/schemas/CloudEvent"
      - properties:
          data:
            $ref: "#/components/schemas/ReachabilityDataSmsDisconnected"
        type: object
      description: event structure for reachability data usage
    EventReachabilitySms:
      allOf:
      - $ref: "#/components/schemas/CloudEvent"
      - properties:
          data:
            $ref: "#/components/schemas/ReachabilityDataSmsDisconnected"
        type: object
      description: event structure for reachability SMS usage
    EventReachabilityDisconnected:
      allOf:
      - $ref: "#/components/schemas/CloudEvent"
      - properties:
          data:
            $ref: "#/components/schemas/ReachabilityDataSmsDisconnected"
        type: object
      description: event structure for disconnection
    ReachabilityDataSmsDisconnected:
      properties:
        device:
          $ref: "#/components/schemas/Device"
        subscriptionId:
          description: "The unique identifier of the subscription in the scope of\
            \ the subscription manager. When this information is contained within\
            \ an event notification, this concept SHALL be referred as `subscriptionId`\
            \ as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/r2.3/documentation/API-design-guidelines.md#122-event-notification)."
          example: qs15-h556-rt89-1298
          title: SubscriptionId
          type: string
      required:
      - subscriptionId
      title: ReachabilityDataSmsDisconnected
    EventSubscriptionEnds:
      allOf:
      - $ref: "#/components/schemas/CloudEvent"
      - properties:
          data:
            $ref: "#/components/schemas/SubscriptionEnds"
        type: object
      description: event structure for event subscription ends
    SubscriptionEnds:
      description: Event detail structure for org.camaraproject.device-reachability-status-subscriptions.v0.subscription-ends
        event
      properties:
        device:
          $ref: "#/components/schemas/Device"
        terminationReason:
          $ref: "#/components/schemas/TerminationReason"
        subscriptionId:
          description: "The unique identifier of the subscription in the scope of\
            \ the subscription manager. When this information is contained within\
            \ an event notification, this concept SHALL be referred as `subscriptionId`\
            \ as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/r2.3/documentation/API-design-guidelines.md#122-event-notification)."
          example: qs15-h556-rt89-1298
          title: SubscriptionId
          type: string
        terminationDescription:
          title: terminationDescription
          type: string
      required:
      - subscriptionId
      - terminationReason
      title: SubscriptionEnds
      type: object
    TerminationReason:
      description: |
        - NETWORK_TERMINATED - API server stopped sending notification
        - SUBSCRIPTION_EXPIRED - Subscription expire time (optionally set by the requester) has been reached
        - MAX_EVENTS_REACHED - Maximum number of events (optionally set by the requester) has been reached
        - ACCESS_TOKEN_EXPIRED - Access Token sinkCredential (optionally set by the requester) expiration time has been reached
        - SUBSCRIPTION_DELETED - Subscription was deleted by the requester
      enum:
      - MAX_EVENTS_REACHED
      - NETWORK_TERMINATED
      - SUBSCRIPTION_EXPIRED
      - ACCESS_TOKEN_EXPIRED
      - SUBSCRIPTION_DELETED
      title: TerminationReason
      type: string
    HTTPSubscriptionRequest:
      allOf:
      - $ref: "#/components/schemas/SubscriptionRequest"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/HTTPSettings"
        type: object
    HTTPSubscriptionResponse:
      allOf:
      - $ref: "#/components/schemas/Subscription"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/HTTPSettings"
        type: object
    HTTPSettings:
      properties:
        headers:
          additionalProperties:
            type: string
          description: |-
            A set of key/value pairs that is copied into the HTTP request as custom headers.

            NOTE: Use/Applicability of this concept has not been discussed in Commonalities under the scope of Meta Release v0.4. When required by an API project as an option to meet a UC/Requirement, please generate an issue for Commonalities discussion about it.
          title: headers
          type: object
        method:
          description: The HTTP method to use for sending the message.
          enum:
          - POST
          title: method
          type: string
      title: HTTPSettings
      type: object
    MQTTSubscriptionRequest:
      allOf:
      - $ref: "#/components/schemas/SubscriptionRequest"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/MQTTSettings"
        type: object
    MQTTSubscriptionResponse:
      allOf:
      - $ref: "#/components/schemas/Subscription"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/MQTTSettings"
        type: object
    MQTTSettings:
      properties:
        topicName:
          title: topicName
          type: string
        qos:
          format: int32
          title: qos
          type: integer
        retain:
          title: retain
          type: boolean
        expiry:
          format: int32
          title: expiry
          type: integer
        userProperties:
          title: userProperties
          type: object
      required:
      - topicName
      title: MQTTSettings
      type: object
    AMQPSubscriptionRequest:
      allOf:
      - $ref: "#/components/schemas/SubscriptionRequest"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/AMQPSettings"
        type: object
    AMQPSubscriptionResponse:
      allOf:
      - $ref: "#/components/schemas/Subscription"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/AMQPSettings"
        type: object
    AMQPSettings:
      properties:
        address:
          title: address
          type: string
        linkName:
          title: linkName
          type: string
        senderSettlementMode:
          enum:
          - settled
          - unsettled
          title: senderSettlementMode
          type: string
        linkProperties:
          additionalProperties:
            type: string
          title: linkProperties
          type: object
      title: AMQPSettings
      type: object
    ApacheKafkaSubscriptionRequest:
      allOf:
      - $ref: "#/components/schemas/SubscriptionRequest"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/ApacheKafkaSettings"
        type: object
    ApacheKafkaSubscriptionResponse:
      allOf:
      - $ref: "#/components/schemas/Subscription"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/ApacheKafkaSettings"
        type: object
    ApacheKafkaSettings:
      properties:
        topicName:
          title: topicName
          type: string
        partitionKeyExtractor:
          title: partitionKeyExtractor
          type: string
        clientId:
          title: clientId
          type: string
        ackMode:
          title: ackMode
          type: integer
      required:
      - topicName
      title: ApacheKafkaSettings
      type: object
    NATSSubscriptionRequest:
      allOf:
      - $ref: "#/components/schemas/SubscriptionRequest"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/NATSSettings"
        type: object
    NATSSubscriptionResponse:
      allOf:
      - $ref: "#/components/schemas/Subscription"
      - properties:
          protocolSettings:
            $ref: "#/components/schemas/NATSSettings"
        type: object
    NATSSettings:
      properties:
        subject:
          title: subject
          type: string
      required:
      - subject
      title: NATSSettings
      type: object
    retrieveDeviceReachabilityStatusSubscriptionList_400_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 400
            type: number
          code:
            enum:
            - INVALID_ARGUMENT
            type: string
        type: object
      example:
        code: INVALID_ARGUMENT
        message: message
        status: 6.027456183070403
      title: retrieveDeviceReachabilityStatusSubscriptionList_400_response
    retrieveDeviceReachabilityStatusSubscriptionList_401_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 401
            type: number
          code:
            enum:
            - UNAUTHENTICATED
            - AUTHENTICATION_REQUIRED
            type: string
        type: object
      example:
        code: UNAUTHENTICATED
        message: message
        status: 5.962133916683182
      title: retrieveDeviceReachabilityStatusSubscriptionList_401_response
    retrieveDeviceReachabilityStatusSubscriptionList_403_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 403
            type: number
          code:
            enum:
            - PERMISSION_DENIED
            type: string
        type: object
      example:
        code: PERMISSION_DENIED
        message: message
        status: 2.3021358869347655
      title: retrieveDeviceReachabilityStatusSubscriptionList_403_response
    createDeviceReachabilityStatusSubscription_400_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 400
            type: number
          code:
            enum:
            - INVALID_ARGUMENT
            - OUT_OF_RANGE
            - INVALID_PROTOCOL
            - INVALID_CREDENTIAL
            - INVALID_TOKEN
            type: string
        type: object
      example:
        code: INVALID_ARGUMENT
        message: message
        status: 6.027456183070403
      title: createDeviceReachabilityStatusSubscription_400_response
    createDeviceReachabilityStatusSubscription_403_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 403
            type: number
          code:
            enum:
            - PERMISSION_DENIED
            - SUBSCRIPTION_MISMATCH
            type: string
        type: object
      example:
        code: PERMISSION_DENIED
        message: message
        status: 5.962133916683182
      title: createDeviceReachabilityStatusSubscription_403_response
    createDeviceReachabilityStatusSubscription_409_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 409
            type: number
          code:
            enum:
            - ABORTED
            - ALREADY_EXISTS
            type: string
        type: object
      example:
        code: ABORTED
        message: message
        status: 2.3021358869347655
      title: createDeviceReachabilityStatusSubscription_409_response
    createDeviceReachabilityStatusSubscription_422_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 422
            type: number
          code:
            enum:
            - IDENTIFIER_MISMATCH
            - SERVICE_NOT_APPLICABLE
            - MISSING_IDENTIFIER
            - UNSUPPORTED_IDENTIFIER
            - UNNECESSARY_IDENTIFIER
            - MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED
            type: string
        type: object
      example:
        code: IDENTIFIER_MISMATCH
        message: message
        status: 9.301444243932576
      title: createDeviceReachabilityStatusSubscription_422_response
    createDeviceReachabilityStatusSubscription_429_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 429
            type: number
          code:
            enum:
            - QUOTA_EXCEEDED
            - TOO_MANY_REQUESTS
            type: string
        type: object
      example:
        code: QUOTA_EXCEEDED
        message: message
        status: 2.027123023002322
      title: createDeviceReachabilityStatusSubscription_429_response
    postNotification_410_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 410
            type: number
          code:
            enum:
            - GONE
            type: string
        type: object
      example:
        code: GONE
        message: message
        status: 6.027456183070403
      title: postNotification_410_response
    retrieveDeviceReachabilityStatusSubscription_404_response:
      allOf:
      - $ref: "#/components/schemas/ErrorInfo"
      - properties:
          status:
            enum:
            - 404
            type: number
          code:
            enum:
            - NOT_FOUND
            type: string
        type: object
      example:
        code: NOT_FOUND
        message: message
        status: 6.027456183070403
      title: retrieveDeviceReachabilityStatusSubscription_404_response
  securitySchemes:
    openId:
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
      type: openIdConnect
      x-tokenInfoFunc: openapi_server.controllers.security_controller.info_from_openId
      x-scopeValidateFunc: openapi_server.controllers.security_controller.validate_scope_openId
    notificationsBearerAuth:
      bearerFormat: "{$request.body#/sinkCredential.credentialType}"
      scheme: bearer
      type: http
      x-bearerInfoFunc: openapi_server.controllers.security_controller.info_from_notificationsBearerAuth
